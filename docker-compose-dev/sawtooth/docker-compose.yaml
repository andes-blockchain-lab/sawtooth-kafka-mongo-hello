version: '3.3'

services:

  settings-tp:
    image: hyperledger/sawtooth-settings-tp:1.2.6
    container_name: sawtooth-settings-tp-default
    depends_on:
      - validator
    entrypoint: settings-tp -vv -C tcp://validator:4004

  validator:
    image: hyperledger/sawtooth-validator:1.2.6
    container_name: sawtooth-validator-default
    expose:
      - 4004
    ports:
      - "4004:4004"
    entrypoint: "bash -c \"\
        sawadm keygen && \
        sawtooth keygen my_key && \
        sawset genesis -k /root/.sawtooth/keys/my_key.priv && \
        sawset proposal create \
          -k /root/.sawtooth/keys/my_key.priv \
          sawtooth.consensus.algorithm.name=Devmode \
          sawtooth.consensus.algorithm.version=0.1 \
          -o config.batch && \
        sawadm genesis config-genesis.batch config.batch && \
        sawtooth-validator -vv \
          --endpoint tcp://validator:8800 \
          --bind component:tcp://eth0:4004 \
          --bind network:tcp://eth0:8800 \
          --bind consensus:tcp://eth0:5050 \
          --scheduler serial \
        \""

  devmode-engine:
    image: hyperledger/sawtooth-devmode-engine-rust:1.2.4
    container_name: sawtooth-devmode-engine-rust-default
    depends_on:
      - validator
    entrypoint: devmode-engine-rust -C tcp://validator:5050

  rest-api:
    image: hyperledger/sawtooth-rest-api:1.2.6
    container_name: sawtooth-rest-api-default
    ports:
      - "8008:8008"
    depends_on:
      - validator
    entrypoint: sawtooth-rest-api -C tcp://validator:4004 --bind rest-api:8008

  shell:
    image: hyperledger/sawtooth-shell:1.2.6
    container_name: sawtooth-shell-default
    depends_on:
      - rest-api
    entrypoint: "bash -c \"\
        sawtooth keygen && \
        tail -f /dev/null \
        \""

  sawtooth-explorer:
    image: le999/sawtooth-explorer:0.0.1
    container_name: sawtooth-explorer
    ports:
      - "8090:8090"
      - "8091:8091"
    environment:
      - SAWTOOTH_REST=rest-api:8008 
      - SAWTOOTH_EXPLORER_PROXY=localhost:8090
    depends_on:
      - rest-api


  mongo:
    image: mongo:4.2.7
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: mydb
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js

  mongo-express:
    image: mongo-express:0.54.0
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example


  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3.6.2'
    ports:
      - '2181:2181'
    # volumes:
    #   - 'zookeeper_data:/bitnami'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'docker.io/bitnami/kafka:2.6.0'
    ports:
      - '9092:9092'
      - '9093:9093'
    # volumes:
    #   - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper




  postgresql:
    image: 'bitnami/postgresql:13.3.0'
    ports:
      - '9094:5432'
    environment:
      - POSTGRESQL_USERNAME=my_user
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_DATABASE=my_database
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
    # volumes:
    #   - 'postgres:/bitnami/postgresql'


  pgadmin:
    image: 'dpage/pgadmin4:5.3'
    ports:
      - '9095:9095'
    environment:
      - PGADMIN_LISTEN_PORT=9095
      - PGADMIN_DEFAULT_EMAIL=a@a.com
      - PGADMIN_DEFAULT_PASSWORD=password123
      - POSTGRESQL_DATABASE=my_database
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
    volumes:
      - './servers.json:/pgadmin4/servers.json'

